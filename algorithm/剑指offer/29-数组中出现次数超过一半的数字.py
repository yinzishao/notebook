#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
数组中出现次数超过一半的数字

https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/

解法一： 基于快速排序

这种算法是受快速排序算法的启发。在随机快速排序算法中，我们先
在数组中随机选择一个数字，然后调整数组中数字的顺序，使得比选中的
数字小数字都排在它的左边，比选中的数字大的数字都排在它的右边。如
果这个选中的数字的下标刚好是n/2，那么这个数字就是数组的中位数。如
果它的下标大于n/2，那么中位数应该位于它的左边，我们可以接着在它的
左边部分的数组中查找。如果它的下标小于n/2那么中位数应该位于它的
右边，我们可以接着在它的右边部分的数组中查找。这是一个典型的递归

解法二：

因此我们可以考虑在遍历数组的时候保存两个值:一个
是数组中的一个数字，一个是次数。当我们遍历到下一个数字的时候，如
果下·个数字和我们之前保存的数字相同，则次数加1:如果下一个数字和
我们之前保存的数字不同，则次数减1。如果次数为零，我们需要保存下，
个数字，并把次数设为1，由于我们要找的数字出现的次数比其他所有数字
出现的次数之和还要多，那么要找的数字一肯定是最后一次把次数设为1时

"""


def more_than_half_num(arr):
    times = 0
    result = arr[0]
    for i in arr:
        if times == 0:
            result = i
            times = 1
        elif result == i:
            times += 1
        else:
            times -= 1
    return result


q = [1, 2, 3, 2, 2, 2, 5, 4, 2, 4, 4, 4]
q = [3, 3, 4]
q = [1, 2, 3, 2, 2, 2, 5, 4, 2]

print(more_than_half_num(q))

